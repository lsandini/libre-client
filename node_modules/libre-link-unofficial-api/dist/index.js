var v=process?.env?.LIBRE_LINK_API_URL??"https://api-us.libreview.io",y=process?.env?.LIBRE_LINK_EMAIL,B=process?.env?.LIBRE_LINK_PASSWORD,P=process?.env?.LIBRE_LINK_UP_VERSION??"4.7.0",K=process?.env?.LIBRE_LINK_PATIENT_ID,N=process?.env?.VERBOSE==="true",Y=Object.freeze({apiUrl:v,patientId:K,credentials:{email:y,password:B},lluVersion:P,verbose:N});var Z;(function(Q){Q["Login"]="llu/auth/login";Q["Country"]="llu/config/country?country=DE";Q["Connections"]="llu/connections"})(Z||(Z={}));var H;(function(J){J[J["Red"]=0]="Red";J[J["Green"]=1]="Green";J[J["Yellow"]=2]="Yellow";J[J["Orange"]=3]="Orange"})(H||(H={}));var X;(function(F){F[F["NotComputable"]=0]="NotComputable";F[F["SingleDown"]=1]="SingleDown";F[F["FortyFiveDown"]=2]="FortyFiveDown";F[F["Flat"]=3]="Flat";F[F["FortyFiveUp"]=4]="FortyFiveUp";F[F["SingleUp"]=5]="SingleUp"})(X||(X={}));var k=[X.NotComputable,X.SingleDown,X.FortyFiveDown,X.Flat,X.FortyFiveUp,X.SingleUp],W=["NotComputable","SingleDown","FortyFiveDown","Flat","FortyFiveUp","SingleUp"];var V=(F)=>({...F,created:q(F.created),lastLogin:q(F.lastLogin),dateOfBirth:q(F.dateOfBirth)}),q=(F)=>new Date(F*1000),D=(F,x)=>{const z=F.ValueInMgPerDl,Q=x.targetHigh<z,J=x.targetLow>z;return Object.freeze({timestamp:new Date(F.Timestamp),value:z,measurementColor:F.MeasurementColor,isHigh:Q,isLow:J,trend:w(F.TrendArrow)})};var w=(F,x=X.Flat)=>F??x;var A=Object.freeze({targetHigh:150,targetLow:70});class j{F;x;timestamp;value;measurementColor;isHigh;isLow;trend;constructor(F,x=A){this._raw=F;this._options=x;const z=D(F,x);this.value=z.value,this.timestamp=z.timestamp,this.measurementColor=z.measurementColor,this.isHigh=z.isHigh,this.isLow=z.isLow,this.trend=z.trend}get mmol(){return(this.value/18).toFixed(1)}get mgDl(){return this.value}get trendType(){return W[this.trend]}}class S{F;apiUrl=Y.apiUrl;accessToken=null;patientId=Y.patientId||null;cache=new Map;constructor(F=G){this.options=F;if(!F?.email&&!Y.credentials.email)throw new Error("Libre Link Up credentials are missing.");if(F?.patientId)this.patientId=F.patientId;this.options={...G,...F}}get me(){if(!this.cache.has("user"))throw new Error("User data is not available. Please log in first.");return this.cache.get("user")}async login(){const F=this.options?.email||Y.credentials.email,x=this.options?.password||Y.credentials.password;try{const z=await this._fetcher(Z.Login,{method:"POST",body:JSON.stringify({email:F,password:x})});if(z.status===2)throw new Error("Invalid credentials. Please ensure that the email and password work with the LibreLinkUp app.");if(!z.data)throw new Error("No data returned from Libre Link Up API.");if("redirect"in z.data){this.verbose("Redirecting to region:",z.data.region);const Q=await this.findRegion(z.data.region);return this.apiUrl=Q,await this.login()}return this.accessToken=z.data.authTicket?.token,this.setCache("user",V(z.data.user)),this.verbose("Logged into Libre Link Up API."),z}catch(z){const Q=z;throw console.error(Q),new Error(`Error logging into Libre Link Up API. ${Q.message}`)}}async read(){try{const F=await this.fetchReading();return new j(F.data?.connection.glucoseItem,F.data.connection)}catch(F){const x=F;throw console.error(x),new Error(`Error reading data from Libre Link Up API. ${x.message}`)}}async history(){try{const F=await this.fetchReading();return F.data.graphData.map((z)=>new j(z,F.data.connection))}catch(F){const x=F;throw console.error(x),new Error(`Error reading data from Libre Link Up API. ${x.message}`)}}async*stream(F=90000){while(!0)try{yield await this.read(),await new Promise((z)=>setTimeout(z,F))}catch(x){throw console.error("Error fetching reading:",x),x}}async fetchReading(){try{const F=await this.getPatientId(),x=await this._fetcher(`${Z.Connections}/${F}/graph`);return this.verbose("Fetched reading from Libre Link Up API.",JSON.stringify(x,null,2)),x}catch(F){const x=F;throw console.error(x),new Error(`Error fetching reading from Libre Link Up API. ${x.message}`)}}async fetchConnections(){try{if(this.cache.has("connections"))return this.cache.get("connections");const F=await this._fetcher(Z.Connections);if(this.verbose(`Fetched ${F?.data?.length} connections from Libre Link Up API.`,JSON.stringify(F,null,2)),F?.data?.length)this.setCache("connections",F);return F}catch(F){const x=F;throw console.error(x),new Error(`Error fetching connections from Libre Link Up API. ${x.message}`)}}async getPatientId(){const F=await this.fetchConnections();if(!F.data?.length)throw new Error("No connections found. Please ensure that you have a connection with the LibreLinkUp app.");let x=F.data[0].patientId;if(this.patientId)F.data.find((z)=>z.patientId===this.patientId)?.patientId;if(!x)throw new Error(`Patient ID not found in connections. (${this.patientId})`);return this.verbose("Using patient ID:",x),x}async findRegion(F){try{const z=(await this._fetcher(Z.Country)).data?.regionalMap[F]?.lslApi;if(!z)throw new Error("Region not found in Libre Link Up API.");return z}catch(x){const z=x;throw console.error(z),new Error(`Error finding region in Libre Link Up API. ${z.message}`)}}async _fetcher(F,x={headers:{}}){const z=new Headers({...x.headers,Authorization:this.accessToken?`Bearer ${this.accessToken}`:"",product:"llu.android",version:Y.lluVersion,"accept-encoding":"gzip","cache-control":"no-cache",connection:"Keep-Alive","content-type":"application/json"}),Q=Object.freeze({...x,headers:z});try{const J=await fetch(`${this.apiUrl}/${F}`,Q);if(this.verbose(`[${F}] (${J.status})`,"Response from Libre Link Up API",JSON.stringify(J,null,2)),!J.ok){if(J.status===429)throw new Error("Too many requests. Please wait before trying again.");throw new Error(`Error fetching data from Libre Link Up API. Status: ${J.status}`)}const $=await J.json();return this.verbose(`[${F}]`,"Data from Libre Link Up API",JSON.stringify($,null,2)),$}catch(J){const $=J;throw console.error($),new Error(`Error fetching connections from Libre Link Up API. ${$.message}`)}}verbose(...F){if(Y.verbose)console.log(...F)}setCache(F,x){if(!this.options.cache)return;this.cache.set(F,x)}clearCache(){this.cache.clear()}}var G={cache:!0};export{S as LibreLinkClient,j as GlucoseReading};

//# debugId=8D9297CC2AE814FF64756e2164756e21
//# sourceMappingURL=data:application/json;base64,
