import { GlucoseReading } from "./reading";
import { LibreLoginResponse, LibreUser, LibreConnectionResponse } from "./types";
/**
 * A class for interacting with the Libre Link Up API.
 */
export declare class LibreLinkClient {
    private options;
    private apiUrl;
    private accessToken;
    private patientId;
    private cache;
    constructor(options?: LibreLinkClientOptions);
    /**
     * @description Get the user data. Only available after logging in.
     */
    get me(): LibreUser;
    /**
     * @description Log into the Libre Link Up API using the provided credentials.
     */
    login(): Promise<LibreLoginResponse>;
    /**
     * @description Read the data from the Libre Link Up API.
     * @returns The latest glucose measurement from the Libre Link Up API.
     */
    read(): Promise<GlucoseReading>;
    /**
     * @description Read the history data from the Libre Link Up API.
     */
    history(): Promise<GlucoseReading[]>;
    /**
       * @description Stream the readings from the Libre Link Up API.
       * @param intervalMs The interval between each reading. Default is 90 seconds.
       */
    stream(intervalMs?: number): AsyncGenerator<GlucoseReading, void, unknown>;
    /**
     * @description Fetch the reading from the Libre Link Up API. Use to obtain the raw reading and more.
     * @returns The response from the Libre Link Up API.
     */
    fetchReading(): Promise<LibreConnectionResponse>;
    /**
     * @description Get the connections from the Libre Link Up API.
     */
    fetchConnections(): Promise<any>;
    /**
     * @description Get the patient ID from the connections.
     */
    private getPatientId;
    /**
     * @description Find the region in the Libre Link Up API. This is used when the API returns a redirect.
     * @param region The region to find.
     * @returns The server URL for the region.
     */
    private findRegion;
    /**
     * @description A generic fetcher for the Libre Link Up API.
     * @param endpoint
     * @param options
     */
    private _fetcher;
    /**
     * @description A verbose logger.
     * @param args
     */
    private verbose;
    /**
     * @description Cache a value, if caching is enabled.
     * @param key The key to cache the value under.
     * @param value The value to cache.
     */
    private setCache;
    /**
     * @description Clear the cache.
     */
    clearCache(): void;
}
interface LibreLinkClientOptions {
    email?: string;
    password?: string;
    patientId?: string;
    cache?: boolean;
}
export {};
